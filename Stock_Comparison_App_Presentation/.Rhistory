lines(c(0.16, 0.16, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.16,
coef(fit)[1] + coef(fit)[2] * 0.16))
lines(c(0.27, 0.27, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.27,
coef(fit)[1] + coef(fit)[2] * 0.27))
lines(c(0.34, 0.34, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.34,
coef(fit)[1] + coef(fit)[2] * 0.34))
text(newx, rep(250, 3), labels = newx, pos = 2)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
g + abline(fit, col="red")
library(UsingR)
> data(diamond)
> library(ggplot2)
> g = ggplot(diamond, aes(x = carat, y = price))
> g = g + xlab("Mass (carats)")
> g = g + ylab("Price (SIN $)")
g = ggplot(diamond, aes(x = carat, y = price))
g = 0
g = ggplot(diamond, aes(x = carat, y = price))
g
g = ggplot(diamond, aes(x = carat, y = price))
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
g + abline(fit, col="red")
g
lines(c(1,1), c(2,2), col="red", lwd=2)
g+lines(c(1,1), c(2,2), col="red", lwd=2)
g+lines(c(0.1,0.1), c(0.2,0.2), col="red", lwd=2)
lines(c(0.1,0.1), c(0.2,0.2), col="red", lwd=2)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
plot
plot()
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
g
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
clear()
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
g
plot
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
g
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rattle()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
rattle()
swirl()
swirl()
install_from_swirl("Regression Models")
quit()
swirl()
library(swirl)
swirl()
fit <- lm(child ~ parent)
fit <- lm(child ~ parent,dataset)
fit <- lm(child ~ parent,dataset=galton)
data(galton)
library(UsingR)
data(galton)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[0,0]
ols.ic <- fit$coef(0,0)
ols.ic <- fit$coef$intercept
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(mch)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope*galton$child + ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varRes, varEst+varRes)
all.equal(varChild, varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit-accel)
mean(fit$residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sum(fit$residuals*fit$residuals)/(n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(Yi_hat, galton$child)
sRes <- deviance(fit, galton$child)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
fit1 <- lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(Examination, Education, data=swiss)
cor(Examination, Education, swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
lm(Fertility ~ . + ec,swiss)
efit <- lm(Fertility ~ . + ec, swiss)
fit$coefficients - efit$coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
InsectSprays$A
sB
summary(spray)
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays,name)
sapply(InsectSprays,names)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(lm)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sprayA)
mean(sA)
mean(sprayB)
mean(spray$sprayB)
mean(sB)
nfit <- lm(count ~ spray - 1)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit$coefficient
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C)
""
""
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ ., InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3] ) / 1.6011
swirl()
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
52
1/13
0
3/13
2/52
1/26
2/51
0.8
1
1.6*0.8/2
0.64
mypdf
integrate(0,1.6,x/2)
integrate(x/2,0,1.6)
integrate(mypdf,0,1.6)
median(F(x))
median(mypdf)
median(mypdf,0,1)
1/16
sqrt(2)
swirl()
swirl()
.997*0.001
0.003*.99
0.003*.999
0.025*.999
0.015*.999
.997*0.001 / (.997*0.001 + 0.015*.999)
7/2
expect_dice3
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)/2
integreate(t*f(t),0,2)
integrate(t*f(t),0,2)
integrate(t*t/2,0,2)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
ex2_fair <- sum(dice_sqr*dice_high) - edh^2
ex2_fair <- sum(dice_high * dice_sqr)-edh^2
sum(dice_high * dice_sqr)-edh^2
v
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
p=.8
sum(apply(choose(5,x)*(.8)^x*(.2)^(5-x),c(3,4,5)))
sum(apply(choose(5,x)*(.8)^x*(.2)^(5-x),c(3,4,5))))
sum(apply(c(3,4,5),choose(5,x)*(.8)^x*(.2)^(5-x)))
sum(choose(5,3)*(.8)^3*(.2)^(5-3),choose(5,4)*(.8)^4*(.2)^(5-4),choose(5,5)*(.8)^5*(.2)^(5-5))
pbinom(quantile=2,size=5,prob=0.8,lower.tail =FALSE)
pbinom(quant=2,size=5,prob=0.8,lower.tail =FALSE)
pbinom(qt=2,size=5,prob=0.8,lower.tail =FALSE)
pbinom(2,size=5,prob=0.8,lower.tail =FALSE)
qnorm(10)
qnorm(0.1)
0
qnorm(97.5,mean=3,sdev=2)
qnorm(97.5,mean=3,sigma=2)
qnorm(97.5,mean=3,var=2)
qnorm(97.5,mean=3,2)
qnorm(97.5,mean=3,sd=2)
qnorm(0.975,mean=3,sd=2)
mu + sigma*1.96
3 + 2*1.96
pnorm(1200, mean=1020, sd=50)
pnorm(1200, mean=1020, sd=50,lower.tail=FALSE)
pnorm((X - 1020)/50^2, mean=1020, sd=50,lower.tail=FALSE)
pnorm((X - 1020)/50^2, mean=1020, sd=50,lower.tail=FALSE)
pnorm((1020)/50^2, mean=1020, sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
pnorm(.75,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3,mean=2.5*4)
ppois(3,mean=(2.5*4),lower.tail=TRUE and log.p=FALSE)
ppois(3,mean=4,lower.tail=TRUE and log.p=FALSE)
ppois(3,mean=(2.5*4),lower.tail=TRUE , log.p=FALSE)
ppois(3,mean=4,lower.tail=TRUE , log.p=FALSE)
ppois(3,lower.tail=TRUE , log.p=FALSE)
ppois(3,lambda=4,lower.tail=TRUE , log.p=FALSE)
ppois(3,2.5 * 4)
pbinom(.01,5,100)
pbinom(5,1000,.01)
ppois(5,lambda=1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
p=.6
p + c(-1,1)*qnorm(.975)*sqrt(p*(1-p)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
x$conf
x$conf.int
conf.int
p$conf.int
binom.test(60,100)
binom.test(60,100)$conf.int
binom.test(30,100)$conf.int
mywald(.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
1.58 + c(-1,1)*t_(10-1)*s/sqrt(10)
1.58 + c(-1,1)*(10-1)*s/sqrt(10)
1.58 + c(-1,1)*qt(.975,10-1)*s/sqrt(10)
mn + c(-1,1)*qt(.975,10-1)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
sp <- (8-1)(15.34)^2+(21-1)(18.23)^2
sp <- (8-1)*(15.34)^2+(21-1)*(18.23)^2
ns <- 27
sp <- sqrt(sp/ns)
1.58 + c(-1,1)*qt(.975,27)*s*(1/7 + 1/20)/sqrt(27)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
md+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/8+1/21)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- 15.34^2 + 18.23^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^4/8^2/27 + 18.23^^/21^/27)
den <- (15.34^4/8^2/27 + 18.23^2/21^/27)
den <- (15.34^4/8^2/27 + 18.23^4/21^2/27)
den <- (15.34^4/8^2/7 + 18.23^4/21^2/20)
mydf <- num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
rattle()
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rattle()
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rattle()
rattle()
install.packages(c('glmnet', 'gbm', 'rpart'))
install.packages(c("glmnet", "gbm", "rpart"))
mid <- c(89, 72, 94, 69)
mid^2
mid2 <- mid^2
mean(mid)
midp <- mid-mean(mid)
midp
mid2p <- mid2 - mean(mid2)
mid2p
midr <- max(mid) - min(mid)
midr
mid2r <- max(mid2) - min(mid2)
midn <- midp / midr
mid2n <- mid2p / mid2r
midn
mid2n
J <- function(theta) { return(2*theta^3+2) }
J(1.001)
J(1.001)-J(0.999)
(J(1.001)-J(0.999))/0.01
(J(1.01)-J(0.99))/0.01
(J(1.01)-J(0.99))/0.02
85/(85+890)
rattle()
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rattle()
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
setwd("/Users/ahalbutogullari/Documents/New/DevelopingDataProducts/Stock_Comparison_App_Presentation")
ls
ls()
dir()
author('interactive')
library("slidify", lib.loc="~/Library/R/3.1/library")
library("slidifyLibraries", lib.loc="~/Library/R/3.1/library")
library("shiny", lib.loc="~/Library/R/3.1/library")
library("rCharts", lib.loc="~/Library/R/3.1/library")
author('interactive')
dir()
slidify()
slidify("index.Rmd")
runDeck()
runDeck()
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("slidify", lib.loc="~/Library/R/3.1/library")
slidify("index.Rmd")
setwd("/Users/ahalbutogullari/Documents/New/DevelopingDataProducts/Developing_Data_Products_repo/Stock_Comparison_App_Presentation")
slidify("index.Rmd")
runDeck()
dir
dir()
getwd()
